name: Deploy Fibonnaci app to production

on:
  push:
    branches: [main]


env:
# environment controller
  TERRAFORM_ACTION: plan
  IMAGE_NAME: "fibonacci"

jobs:
  # Configure AWS credentials
  configure-aws-credentials:
    name: Configure AWS credentials
    runs-on: ubuntu-latest

    steps: 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
    
  # build AWS infrastructure for EKS cluster
  deploy_aws_infrastructure:
    name: build AWS infra
    needs: configure-aws-credentials
    runs-on: ubuntu-latest
    timeout-minutes: 10 
    steps:
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraforn
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: v1.5.7
      
      - name: Initialize terraform  
        working-directory: ./iac/terraform-infrastructure
        run: terraform init

      - name: Run Terraform apply/destroy
        working-directory: ./iac/terraform-infrastructure
        run: terraform ${{ env.TERRAFORM_ACTION }} #--auto-approve
    outputs:
      terraform_action: ${{ env.TERRAFORM_ACTION }}

  # Create ECR repository
  create_ecr_repository:
    name: create ECR repository
    needs: 
      - configure-aws-credentials
      - deploy_AWS_infrastructure
    if: needs.deploy_AWS_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Check if ECR repository exists
        env: 
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          result=$(aws ecr describe-depositories --repository-names "${{ env.IMAGE_NAME}}" | 
                  jq -r '.repositories[0].repositoryName'
          )
          echo "repo_name=$result" >> $GITHUB_ENV
        continue-on-error: true
      
      - name: create ECR repository
        env:
          IMAGE_NAME: env.IMAGE_NAME
        if: env.repo_name != env.IMAGE_NAME
        run: |
          aws ecr create-repository --repository-name ${{ env.IMAGE_NAME }}



      

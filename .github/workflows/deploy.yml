name: Deploy Fibonnaci app to production

on:
  push:
    branches: [main]
  pull_request:
    branches: [ "main" ]


env:
# environment controller
  TERRAFORM_ACTION: plan
  IMAGE_NAME: "fibonacci"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:    
  # build AWS infrastructure for EKS cluster
  deploy_aws_infrastructure:
    name: build AWS infra
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Install kubectl 
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.28.1'
        id: install

      - name: Install eksctl 
        uses: moia-oss/setup-eksctl@v1
        with:
          version: 'default' # default is latest
        id: install-eksctl
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to amazon ECR 
        id: login-ecr 
        uses: aws-actions/amazon-ecr-login@v1 

      - name: Build, tag and push docker image to amazon ECR 
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: $ {{ env.IMAGE_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG  api/.
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: create eks cluster from eksctl 
        run: eksctl create cluster --name firstcluster --region us-east-1 --nodegroup-name eksgroup --node-type t2.small --nodes 2
      
      - name: update kube config 
        run: aws eks update-kubeconfig --name firstcluster

      - name: Install ingress-nginx and cert-manager
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/aws/deploy.yaml
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml

      - name: Deploy to EKS 
        run: kubectl apply -f k8s/

      
